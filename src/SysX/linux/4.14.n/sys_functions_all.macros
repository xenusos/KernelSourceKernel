// open start. 
ADD_FUNCTION_2(vfs_truncate)
ADD_FUNCTION_4(vfs_fallocate)
ADD_FUNCTION_4(finish_open)
ADD_FUNCTION_2(finish_no_open)
ADD_FUNCTION_3(file_path)
ADD_FUNCTION_3(dentry_open)
ADD_FUNCTION_3(filp_open)
ADD_FUNCTION_5(file_open_root)
ADD_FUNCTION_2(filp_close)
ADD_FUNCTION_2(generic_file_open)
ADD_FUNCTION_2(nonseekable_open)
// namei start. 
ADD_FUNCTION_2(generic_permission)
ADD_FUNCTION_2(__inode_permission)
ADD_FUNCTION_2(inode_permission)
ADD_FUNCTION_1(path_get)
ADD_FUNCTION_1(path_put)
ADD_FUNCTION_1(follow_up)
ADD_FUNCTION_1(follow_down_one)
ADD_FUNCTION_1(follow_down)
ADD_FUNCTION_3(full_name_hash)
ADD_FUNCTION_2(hashlen_string)
ADD_FUNCTION_3(kern_path)
ADD_FUNCTION_5(vfs_path_lookup)
ADD_FUNCTION_3(lookup_one_len)
ADD_FUNCTION_3(lookup_one_len_unlocked)
ADD_FUNCTION_5(user_path_at_empty)
ADD_FUNCTION_4(kern_path_mountpoint)
ADD_FUNCTION_2(__check_sticky)
ADD_FUNCTION_2(lock_rename)
ADD_FUNCTION_2(unlock_rename)
ADD_FUNCTION_4(vfs_create)
ADD_FUNCTION_3(vfs_tmpfile)
ADD_FUNCTION_4(kern_path_create)
ADD_FUNCTION_2(done_path_create)
ADD_FUNCTION_4(user_path_create)
ADD_FUNCTION_4(vfs_mknod)
ADD_FUNCTION_3(vfs_mkdir)
ADD_FUNCTION_2(vfs_rmdir)
ADD_FUNCTION_3(vfs_unlink)
ADD_FUNCTION_3(vfs_symlink)
ADD_FUNCTION_4(vfs_link)
ADD_FUNCTION_6(vfs_rename)
ADD_FUNCTION_2(vfs_whiteout)
ADD_FUNCTION_3(vfs_readlink)
ADD_FUNCTION_2(vfs_get_link)
ADD_FUNCTION_1(page_put_link)
ADD_FUNCTION_3(page_readlink)
ADD_FUNCTION_4(__page_symlink)
ADD_FUNCTION_3(page_symlink)
// stat start. 
ADD_FUNCTION_2(generic_fillattr)
ADD_FUNCTION_4(vfs_getattr_nosec)
ADD_FUNCTION_4(vfs_getattr)
ADD_FUNCTION_4(vfs_statx_fd)
ADD_FUNCTION_5(vfs_statx)
ADD_FUNCTION_2(__inode_add_bytes)
ADD_FUNCTION_2(inode_add_bytes)
ADD_FUNCTION_2(__inode_sub_bytes)
ADD_FUNCTION_2(inode_sub_bytes)
ADD_FUNCTION_1(inode_get_bytes)
ADD_FUNCTION_2(inode_set_bytes)
// read_write start. 
ADD_FUNCTION_3(vfs_setpos)
ADD_FUNCTION_5(generic_file_llseek_size)
ADD_FUNCTION_3(generic_file_llseek)
ADD_FUNCTION_4(fixed_size_llseek)
ADD_FUNCTION_3(no_seek_end_llseek)
ADD_FUNCTION_4(no_seek_end_llseek_size)
ADD_FUNCTION_3(noop_llseek)
ADD_FUNCTION_3(no_llseek)
ADD_FUNCTION_3(default_llseek)
ADD_FUNCTION_3(vfs_llseek)
ADD_FUNCTION_4(kernel_read)
ADD_FUNCTION_4(__kernel_write)
ADD_FUNCTION_4(kernel_write)
ADD_FUNCTION_4(vfs_iter_read)
ADD_FUNCTION_4(vfs_iter_write)
// timekeeping start. 
ADD_FUNCTION_0(ktime_get_mono_fast_ns)
ADD_FUNCTION_0(ktime_get_raw_fast_ns)
ADD_FUNCTION_0(ktime_get_boot_fast_ns)
ADD_FUNCTION_1(pvclock_gtod_register_notifier)
ADD_FUNCTION_1(pvclock_gtod_unregister_notifier)
ADD_FUNCTION_1(__getnstimeofday64)
ADD_FUNCTION_1(getnstimeofday64)
ADD_FUNCTION_0(ktime_get)
ADD_FUNCTION_0(ktime_get_resolution_ns)
ADD_FUNCTION_1(ktime_get_with_offset)
ADD_FUNCTION_2(ktime_mono_to_any)
ADD_FUNCTION_0(ktime_get_raw)
ADD_FUNCTION_1(ktime_get_ts64)
ADD_FUNCTION_0(ktime_get_seconds)
ADD_FUNCTION_0(ktime_get_real_seconds)
ADD_FUNCTION_1(do_gettimeofday)
ADD_FUNCTION_1(do_settimeofday64)
ADD_FUNCTION_1(getrawmonotonic64)
// timer start. 
ADD_FUNCTION_1(round_jiffies)
ADD_FUNCTION_1(round_jiffies_relative)
ADD_FUNCTION_2(__round_jiffies_up)
ADD_FUNCTION_1(round_jiffies_up)
ADD_FUNCTION_1(round_jiffies_up_relative)
ADD_FUNCTION_1(msleep)
ADD_FUNCTION_1(msleep_interruptible)
ADD_FUNCTION_2(usleep_range)
ADD_FUNCTION_1(schedule_timeout)
ADD_FUNCTION_1(schedule_timeout_interruptible)
ADD_FUNCTION_1(schedule_timeout_killable)
ADD_FUNCTION_1(schedule_timeout_uninterruptible)
// lockref start. 
ADD_FUNCTION_1(lockref_get)
ADD_FUNCTION_1(lockref_get_not_zero)
ADD_FUNCTION_1(lockref_get_or_lock)
ADD_FUNCTION_1(lockref_put_return)
ADD_FUNCTION_1(lockref_mark_dead)
ADD_FUNCTION_1(lockref_get_not_dead)
ADD_FUNCTION_1(lockref_put_or_lock)
// dcache start. 
ADD_FUNCTION_1(__d_drop)
ADD_FUNCTION_1(d_drop)
ADD_FUNCTION_1(dput)
ADD_FUNCTION_1(dget_parent)
ADD_FUNCTION_1(d_find_alias)
ADD_FUNCTION_1(d_prune_aliases)
ADD_FUNCTION_1(shrink_dcache_sb)
ADD_FUNCTION_1(path_has_submounts)
ADD_FUNCTION_1(shrink_dcache_parent)
ADD_FUNCTION_1(d_invalidate)
ADD_FUNCTION_2(d_alloc)
ADD_FUNCTION_2(d_alloc_pseudo)
ADD_FUNCTION_2(d_alloc_name)
ADD_FUNCTION_2(d_set_d_op)
ADD_FUNCTION_1(d_set_fallthru)
ADD_FUNCTION_2(d_instantiate)
ADD_FUNCTION_2(d_instantiate_new)
ADD_FUNCTION_2(d_instantiate_no_diralias)
ADD_FUNCTION_1(d_make_root)
ADD_FUNCTION_1(d_find_any_alias)
ADD_FUNCTION_1(d_obtain_alias)
ADD_FUNCTION_1(d_obtain_root)
ADD_FUNCTION_3(d_add_ci)
ADD_FUNCTION_2(d_lookup)
ADD_FUNCTION_2(d_hash_and_lookup)
ADD_FUNCTION_1(d_delete)
ADD_FUNCTION_1(d_rehash)
ADD_FUNCTION_1(d_alloc_parallel)
ADD_FUNCTION_1(__d_lookup_done)
ADD_FUNCTION_2(d_add)
ADD_FUNCTION_2(d_exact_alias)
ADD_FUNCTION_2(dentry_update_name_case)
ADD_FUNCTION_2(d_move)
ADD_FUNCTION_2(d_splice_alias)
ADD_FUNCTION_3(d_path)
ADD_FUNCTION_3(simple_dname)
ADD_FUNCTION_3(dentry_path_raw)
ADD_FUNCTION_2(d_tmpfile)
// mountspacenamespace start. 
ADD_FUNCTION_1(__mnt_is_readonly)
ADD_FUNCTION_1(mnt_want_write)
ADD_FUNCTION_1(mnt_clone_write)
ADD_FUNCTION_1(mnt_want_write_file)
ADD_FUNCTION_1(mnt_drop_write)
ADD_FUNCTION_1(mnt_drop_write_file)
ADD_FUNCTION_4(vfs_kern_mount)
ADD_FUNCTION_4(vfs_submount)
ADD_FUNCTION_1(mntput)
ADD_FUNCTION_1(mntget)
ADD_FUNCTION_1(path_is_mountpoint)
ADD_FUNCTION_1(may_umount_tree)
ADD_FUNCTION_1(may_umount)
ADD_FUNCTION_1(clone_private_mount)
ADD_FUNCTION_2(mnt_set_expiry)
ADD_FUNCTION_1(mark_mounts_for_expiry)
ADD_FUNCTION_2(mount_subtree)
ADD_FUNCTION_2(path_is_under)
ADD_FUNCTION_2(kern_mount_data)
ADD_FUNCTION_1(kern_unmount)
// random start. 
ADD_FUNCTION_2(get_random_bytes)
ADD_FUNCTION_0(wait_for_random_bytes)
ADD_FUNCTION_0(get_random_u32)
ADD_FUNCTION_0(get_random_u64)
// pid start. 
ADD_FUNCTION_1(put_pid)
ADD_FUNCTION_2(find_pid_ns)
ADD_FUNCTION_1(find_vpid)
ADD_FUNCTION_2(pid_task)
ADD_FUNCTION_2(get_task_pid)
ADD_FUNCTION_2(get_pid_task)
ADD_FUNCTION_1(find_get_pid)
ADD_FUNCTION_2(pid_nr_ns)
ADD_FUNCTION_1(pid_vnr)
ADD_FUNCTION_1(task_active_pid_ns)
// fuckthisshitimout start. 
ADD_FUNCTION_1(do_exit)
ADD_FUNCTION_2(complete_and_exit)
ADD_FUNCTION_0(abort)
// mmap start. 
ADD_FUNCTION_1(vm_get_page_prot)
ADD_FUNCTION_5(get_unmapped_area)
ADD_FUNCTION_2(find_vma)
ADD_FUNCTION_2(find_extend_vma)
ADD_FUNCTION_2(vm_munmap)
ADD_FUNCTION_3(vm_brk_flags)
ADD_FUNCTION_2(vm_brk)
// mmutils start. 
ADD_FUNCTION_1(kfree_const)
ADD_FUNCTION_2(kstrdup)
ADD_FUNCTION_2(kstrdup_const)
ADD_FUNCTION_3(kstrndup)
ADD_FUNCTION_3(kmemdup)
ADD_FUNCTION_3(kmemdup_nul)
ADD_FUNCTION_2(memdup_user)
ADD_FUNCTION_2(strndup_user)
ADD_FUNCTION_2(memdup_user_nul)
ADD_FUNCTION_4(__get_user_pages_fast)
ADD_FUNCTION_4(get_user_pages_fast)
ADD_FUNCTION_6(vm_mmap)
ADD_FUNCTION_3(kvmalloc_node)
ADD_FUNCTION_1(kvfree)
ADD_FUNCTION_1(page_mapped)
ADD_FUNCTION_1(page_mapping)
ADD_FUNCTION_1(__page_mapcount)
ADD_FUNCTION_0(vm_memory_committed)
// sched_core start. 
ADD_FUNCTION_2(set_cpus_allowed_ptr)
ADD_FUNCTION_1(kick_process)
ADD_FUNCTION_1(wake_up_process)
ADD_FUNCTION_0(preempt_notifier_inc)
ADD_FUNCTION_0(preempt_notifier_dec)
ADD_FUNCTION_1(preempt_notifier_register)
ADD_FUNCTION_1(preempt_notifier_unregister)
ADD_FUNCTION_0(single_task_running)
ADD_FUNCTION_1(preempt_count_add)
ADD_FUNCTION_1(preempt_count_sub)
ADD_FUNCTION_0(schedule)
ADD_FUNCTION_0(preempt_schedule)
ADD_FUNCTION_0(preempt_schedule_notrace)
ADD_FUNCTION_4(default_wake_function)
ADD_FUNCTION_2(set_user_nice)
ADD_FUNCTION_3(sched_setscheduler)
ADD_FUNCTION_2(sched_setattr)
ADD_FUNCTION_3(sched_setscheduler_nocheck)
ADD_FUNCTION_0(__cond_resched_softirq)
ADD_FUNCTION_0(yield)
ADD_FUNCTION_2(yield_to)
ADD_FUNCTION_1(io_schedule_timeout)
ADD_FUNCTION_0(io_schedule)
// chardev start. 
ADD_FUNCTION_3(register_chrdev_region)
ADD_FUNCTION_2(unregister_chrdev_region)
ADD_FUNCTION_4(alloc_chrdev_region)
ADD_FUNCTION_2(cdev_init)
ADD_FUNCTION_0(cdev_alloc)
ADD_FUNCTION_1(cdev_del)
ADD_FUNCTION_3(cdev_add)
ADD_FUNCTION_2(cdev_set_parent)
ADD_FUNCTION_2(cdev_device_add)
ADD_FUNCTION_2(cdev_device_del)
ADD_FUNCTION_5(__register_chrdev)
ADD_FUNCTION_4(__unregister_chrdev)
// linuxclass start. 
ADD_FUNCTION_2(__class_register)
ADD_FUNCTION_1(class_destroy)
ADD_FUNCTION_1(class_unregister)
ADD_FUNCTION_3(__class_create)
ADD_FUNCTION_4(class_dev_iter_init)
ADD_FUNCTION_1(class_dev_iter_next)
ADD_FUNCTION_1(class_dev_iter_exit)
ADD_FUNCTION_4(class_for_each_device)
ADD_FUNCTION_4(class_find_device)
ADD_FUNCTION_1(class_interface_register)
ADD_FUNCTION_1(class_interface_unregister)
ADD_FUNCTION_3(show_class_attr_string)
ADD_FUNCTION_1(class_compat_register)
ADD_FUNCTION_1(class_compat_unregister)
ADD_FUNCTION_3(class_compat_create_link)
ADD_FUNCTION_3(class_compat_remove_link)
// modcore start. 
ADD_FUNCTION_1(register_module_notifier)
ADD_FUNCTION_1(unregister_module_notifier)
ADD_FUNCTION_2(__module_put_and_exit)
ADD_FUNCTION_2(each_symbol_section)
ADD_FUNCTION_5(find_symbol)
ADD_FUNCTION_1(find_module)
ADD_FUNCTION_2(ref_module)
ADD_FUNCTION_1(module_refcount)
ADD_FUNCTION_1(symbol_put_addr)
ADD_FUNCTION_1(__module_get)
ADD_FUNCTION_1(try_module_get)
ADD_FUNCTION_1(module_put)
ADD_FUNCTION_1(__module_address)
ADD_FUNCTION_1(__module_text_address)
// driversbasecore start. 
ADD_FUNCTION_3(device_link_add)
ADD_FUNCTION_1(device_link_del)
ADD_FUNCTION_1(dev_driver_string)
ADD_FUNCTION_4(device_store_ulong)
ADD_FUNCTION_3(device_show_ulong)
ADD_FUNCTION_4(device_store_int)
ADD_FUNCTION_3(device_show_int)
ADD_FUNCTION_4(device_store_bool)
ADD_FUNCTION_3(device_show_bool)
ADD_FUNCTION_2(device_add_groups)
ADD_FUNCTION_2(device_remove_groups)
ADD_FUNCTION_2(devm_device_add_group)
ADD_FUNCTION_2(devm_device_remove_group)
ADD_FUNCTION_2(devm_device_add_groups)
ADD_FUNCTION_2(devm_device_remove_groups)
ADD_FUNCTION_2(device_create_file)
ADD_FUNCTION_2(device_remove_file)
ADD_FUNCTION_2(device_remove_file_self)
ADD_FUNCTION_2(device_create_bin_file)
ADD_FUNCTION_2(device_remove_bin_file)
ADD_FUNCTION_1(device_initialize)
ADD_FUNCTION_1(device_add)
ADD_FUNCTION_1(device_register)
ADD_FUNCTION_1(get_device)
ADD_FUNCTION_1(put_device)
ADD_FUNCTION_1(device_del)
ADD_FUNCTION_1(device_unregister)
ADD_FUNCTION_3(device_for_each_child)
ADD_FUNCTION_3(device_for_each_child_reverse)
ADD_FUNCTION_3(device_find_child)
ADD_FUNCTION_2(__root_device_register)
ADD_FUNCTION_1(root_device_unregister)
ADD_FUNCTION_5(device_create)
ADD_FUNCTION_6(device_create_with_groups)
ADD_FUNCTION_2(device_destroy)
ADD_FUNCTION_2(device_rename)
ADD_FUNCTION_3(dev_printk_emit)
ADD_FUNCTION_2(dev_emerg)
ADD_FUNCTION_2(dev_alert)
ADD_FUNCTION_2(dev_crit)
ADD_FUNCTION_2(dev_err)
ADD_FUNCTION_2(dev_warn)
ADD_FUNCTION_2(dev_notice)
ADD_FUNCTION_2(_dev_info)
ADD_FUNCTION_2(set_primary_fwnode)
ADD_FUNCTION_2(device_set_of_node_from_dev)
// usermem start. 
ADD_FUNCTION_3(_copy_from_user)
ADD_FUNCTION_3(_copy_to_user)
// readdir start. 
ADD_FUNCTION_2(iterate_dir)
// rwsem start. 
ADD_FUNCTION_1(downgrade_write)
ADD_FUNCTION_1(up_write)
ADD_FUNCTION_1(up_read)
ADD_FUNCTION_1(down_write_trylock)
ADD_FUNCTION_1(down_write_killable)
ADD_FUNCTION_1(down_write)
ADD_FUNCTION_1(down_read_trylock)
ADD_FUNCTION_1(down_read)
// signal start. 
ADD_FUNCTION_2(kernel_sigaction)
ADD_FUNCTION_0(recalc_sigpending)
ADD_FUNCTION_3(dequeue_signal)
ADD_FUNCTION_1(flush_signals)
ADD_FUNCTION_2(force_sig)
ADD_FUNCTION_3(send_sig)
ADD_FUNCTION_3(send_sig_info)
ADD_FUNCTION_3(sigprocmask)
ADD_FUNCTION_3(kill_pgrp)
ADD_FUNCTION_3(kill_pid)
ADD_FUNCTION_4(kill_pid_info_as_cred)
// gup start. 
ADD_FUNCTION_5(fixup_user_fault)
ADD_FUNCTION_5(get_user_pages_locked)
ADD_FUNCTION_4(get_user_pages_unlocked)
ADD_FUNCTION_8(get_user_pages_remote)
ADD_FUNCTION_5(get_user_pages)
ADD_FUNCTION_5(get_user_pages_longterm)
// iomap start. 
ADD_FUNCTION_2(ioremap_nocache)
ADD_FUNCTION_2(ioremap_uc)
ADD_FUNCTION_2(ioremap_wc)
ADD_FUNCTION_2(ioremap_wt)
ADD_FUNCTION_2(ioremap_cache)
ADD_FUNCTION_3(ioremap_prot)
ADD_FUNCTION_1(iounmap)
// mempolicy start. 
ADD_FUNCTION_2(alloc_pages_current)
// alloc_pages start. 
ADD_FUNCTION_2(split_page)
ADD_FUNCTION_4(__alloc_pages_nodemask)
ADD_FUNCTION_2(__get_free_pages)
ADD_FUNCTION_1(get_zeroed_page)
ADD_FUNCTION_2(__free_pages)
ADD_FUNCTION_2(free_pages)
ADD_FUNCTION_2(__page_frag_cache_drain)
ADD_FUNCTION_3(page_frag_alloc)
ADD_FUNCTION_1(page_frag_free)
ADD_FUNCTION_2(alloc_pages_exact)
ADD_FUNCTION_2(free_pages_exact)
ADD_FUNCTION_0(nr_free_buffer_pages)
ADD_FUNCTION_0(si_mem_available)
ADD_FUNCTION_1(si_meminfo)
ADD_FUNCTION_2(adjust_managed_page_count)
ADD_FUNCTION_4(free_reserved_area)
// vmalloc start. 
ADD_FUNCTION_1(vmalloc_to_page)
ADD_FUNCTION_1(vmalloc_to_pfn)
ADD_FUNCTION_1(register_vmap_purge_notifier)
ADD_FUNCTION_1(unregister_vmap_purge_notifier)
ADD_FUNCTION_0(vm_unmap_aliases)
ADD_FUNCTION_2(vm_unmap_ram)
ADD_FUNCTION_4(vm_map_ram)
ADD_FUNCTION_2(unmap_kernel_range_noflush)
ADD_FUNCTION_2(unmap_kernel_range)
ADD_FUNCTION_3(map_vm_area)
ADD_FUNCTION_4(__get_vm_area)
ADD_FUNCTION_1(vunmap)
ADD_FUNCTION_4(vmap)
ADD_FUNCTION_3(__vmalloc)
ADD_FUNCTION_4(remap_vmalloc_range_partial)
ADD_FUNCTION_3(remap_vmalloc_range)
ADD_FUNCTION_2(alloc_vm_area)
ADD_FUNCTION_1(free_vm_area)
// memory start. 
ADD_FUNCTION_3(zap_vma_ptes)
ADD_FUNCTION_3(vm_insert_page)
ADD_FUNCTION_3(vm_insert_pfn)
ADD_FUNCTION_4(vm_insert_pfn_prot)
ADD_FUNCTION_3(vm_insert_mixed)
ADD_FUNCTION_3(vm_insert_mixed_mkwrite)
ADD_FUNCTION_5(remap_pfn_range)
ADD_FUNCTION_3(vm_iomap_memory)
ADD_FUNCTION_5(apply_to_page_range)
ADD_FUNCTION_4(unmap_mapping_range)
ADD_FUNCTION_3(handle_mm_fault)
ADD_FUNCTION_3(follow_pfn)
ADD_FUNCTION_5(generic_access_phys)
ADD_FUNCTION_5(access_process_vm)
// unsafespinnies start. 
ADD_FUNCTION_1(_raw_spin_lock)
ADD_FUNCTION_1(_raw_spin_unlock)
// map_hack start. 
ADD_FUNCTION_5(_install_special_mapping)
ADD_FUNCTION_3(vm_munmap_ex)
// KNIFE start. 
ADD_FUNCTION_1(free_task)
ADD_FUNCTION_1(__put_task_struct)
ADD_FUNCTION_1(__mmdrop)
ADD_FUNCTION_1(mmput)
ADD_FUNCTION_1(get_mm_exe_file)
ADD_FUNCTION_1(get_task_exe_file)
ADD_FUNCTION_1(get_task_mm)
// file_table start. 
ADD_FUNCTION_0(get_max_files)
ADD_FUNCTION_3(alloc_file)
ADD_FUNCTION_1(fput)
